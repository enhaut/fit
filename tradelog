#!/bin/sh

################################################
#       This is my first program in bash       #
#       so don't judge me. It's not even       #
#    optimized for speed, but it's working     #
#                 Samuel DobroÅˆ                #
#         xdobro23, FIT VUT, 2.4.2021          #
################################################


export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
  echo "Usage: tradelog [-h|--help] [FILTER] [COMMAND] [FILE [FILE [...]]]"
  echo "Filters:"
  echo "    -a DATETIME   records after the entered DATETIME (YYYY-MM-DD HH:MM:SS)"
  echo "    -b DATETIME   records before the entered DATETIME (YYYY-MM-DD HH:MM:SS)"
  echo "    -t TICKER     records matching tickers"
  echo "    -w WIDTH      sets width of graph"
  echo "Commands:"
  echo "    list-tick     prints list of all the tickers"
  echo "    profit        prints total profit"
  echo "    pos           prints opened positions sorted descending"
  echo "    last-price    prints last price for every ticker"
  echo "    hist-ord      prints histogram of the count of tickers"
  echo "    graph-pos     prints graph of positions of tickers"
  echo "  -h|--help       prints help"
}

DELIMITER="';'"

FILTERS=""
TICKERS=""
FILES=""
GRAPH_WIDTH=-1
COMMAND=""
SORTER="sort -u"

error()
{
  echo "$1" >&2
  exit 1
}

check_date()
{
  if ! date -d "$1" 2> /dev/null 1> /dev/null; then  # TODO: check format of date
    error "Invalid date format!"
  fi
}

add_to_filters()
{
  if [ -z "$FILTERS" ]; then
    FILTERS="$1"
  else
    FILTERS="$FILTERS | $1"
  fi
}

add_to_tickers()
{
  INVALID_TICKER=$(echo "$1" | grep "[[:space:]]\|;")
  if [ -z "$1" ] || [ -n "$INVALID_TICKER" ]; then
    error "Invalid ticker!"
  fi

  AWK_COMMAND="\$2 == \"$1\""
  if [ -z "$TICKERS" ]; then
    TICKERS=$AWK_COMMAND
  else
    TICKERS="$TICKERS || $AWK_COMMAND"
  fi
}

add_tickers_to_filters()
{
  AWK_COMMAND="awk -F $DELIMITER '{if($TICKERS) {print}}'"
  if [ -z "$FILTERS" ]; then
    FILTERS="$AWK_COMMAND"
  else
    FILTERS="$AWK_COMMAND | $FILTERS"
  fi
}

add_to_files()
{
  FILE_COMMAND=""
  case "$1" in
    *".gz")
      FILE_COMMAND="gunzip -c"
      ;;
    *)
      FILE_COMMAND="cat"
      ;;
  esac

  if [ -z "$FILES" ]; then
    FILES="$FILE_COMMAND $1"
  else
    FILES="$FILES ; $FILE_COMMAND $1"
  fi
}

add_command()
{
  if [ -z "$COMMAND" ]; then
    COMMAND="$1"
  else
    error "Only one command per call is supported!"
  fi
}

process()
{
  if [ -n "$1" ]; then
    eval "$1"
  else
    cat
  fi
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      ;;
    -a)
      check_date "$2"
      add_to_filters "awk -F $DELIMITER '{if(\$1 > \"$2\") {print}}'"
      shift 2
      ;;
    -b)
      check_date "$2"
      add_to_filters "awk -F $DELIMITER '{if(\$1 < \"$2\") {print}}'"
      shift 2
      ;;
    -t)
      add_to_tickers "$2"
      shift 2
      ;;
    -w)
      if [ $GRAPH_WIDTH -ne "-1" ]; then
        error "Width could be set only once!"
      elif [ "0" -ge "$2" ]; then
        error "Width has to be > 0!"
      else
        GRAPH_WIDTH=$2
      fi
      shift 2
      ;;
    list-tick)
      add_command "awk -F $DELIMITER '{print \$2}'"
      shift
      ;;
    profit)
      add_command "awk -F $DELIMITER '{if(\$3 == \"buy\")profit -= (\$4 * \$6); else profit += \$4 * \$6;}END{printf \"%.2f\n\", profit}'"
      shift
      ;;
    pos)
      add_command "awk -F $DELIMITER '{tickers[\$2]=\$4;if(\$3 == \"buy\"){units[\$2]+=\$6}else{units[\$2] -= \$6}} END {len=0;for (ticker in tickers){if(len < (length(int(tickers[ticker] * units[ticker]))+2)){len=(length(int(tickers[ticker] * units[ticker]))+2);}} for (ticker in tickers) { printf \"%-9s :%*.2f\n\", ticker, len+2, tickers[ticker] * units[ticker] }}'"
      SORTER="sort -n -r -t ':' -k 2,2"
      shift
      ;;
    last-price)
      add_command "awk -F $DELIMITER '{if(\$2 != \"\" && \$4 != \"\")tickers[\$2]=\$4} END {len=0;for (ticker in tickers){if(len < length(tickers[ticker])){len=length(tickers[ticker])}} for (ticker in tickers) { printf \"%-9s :%*.2f\n\", ticker, len+1, tickers[ticker]}}'"
      shift
      ;;
    hist-ord)
      if [ "$GRAPH_WIDTH" -eq -1 ]; then
        GRAPH_WIDTH=1
      fi
      add_command "awk -v w=$GRAPH_WIDTH -F $DELIMITER 'function abs(x){return ((x < 0.0) ? -x : x)} {transactions[\$2]++}END{if(w > 1){len=0; for (ticker in transactions){if (len < transactions[ticker]){len=transactions[ticker]}}}else{len=1} for (ticker in transactions) {printf \"%-9s :\", ticker; {for(i=0;i<int(abs(transactions[ticker]/len)*w);i++){if(i==0){printf \" \"} printf \"#\"} printf \"\n\";}}}'"
      SORTER="sort -n -t ':' -k1,1"
      shift
      ;;
    graph-pos)
      add_command "awk -F $DELIMITER -v w=$GRAPH_WIDTH 'function abs(x){return ((x < 0.0) ? -x : x)} {if(\$3 == \"buy\"){units[\$2]-=\$6}else{units[\$2]+=\$6} last_price[\$2]=\$4}END{max=0; for (ticker in last_price){values[ticker] = last_price[ticker] * units[ticker]; if(abs(values[ticker]) > max){max = abs(values[ticker])}} {if (w == -1) {max = 1000; w = 1;}} {for(ticker in values){printf \"%-9s :\", ticker; for(i=0;i<int(abs(values[ticker])*w/max);i++){if(i==0){printf \" \"} character=\"#\"; if(values[ticker] > 0){character=\"!\"} printf \"%s\", character;}printf \"\n\"}}}' "
      SORTER="sort -n -t ':' -k1,1"
      shift
      ;;
    *)
      add_to_files "$1"
      shift
    ;;
  esac
done


echo "tickers: $TICKERS"

if [ -n "$TICKERS" ]; then
  add_tickers_to_filters
fi

if [ -z "$FILES" ]; then
  FILES="cat"
fi

echo "commands: $COMMAND"
echo "filters: $FILTERS"
echo "log $FILES"
echo "wid: $GRAPH_WIDTH"
echo "sorter: $SORTER"

(eval "$FILES") | process "$FILTERS" | process "$COMMAND" | eval "$SORTER"
